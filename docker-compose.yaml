services:
  redis:
    image: redis:latest
    restart: always
    container_name: redis
    ports:
      - "6379:6379"
    expose:
      - 6379
    volumes:
      - redis_data:/data
    networks:
      - car_price_network
    command: redis-server --save 60 1 --loglevel warning

  mysql:
    image: mysql:latest
    restart: always
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=${APP_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    networks:
      - car_price_network
    volumes:
      - mysql_data:/var/lib/mysql


  # minio:
  #   image: minio/minio
  #   restart: always
  #   env_file:
  #     - .env
  #   container_name: minio
  #   expose:
  #     - 9000
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   environment:
  #     - MINIO_ROOT_USER=${MINIO_ROOT_USER}
  #     - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
  #   healthcheck:
  #     test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
  #     interval: 1s
  #     timeout: 10s
  #     retries: 5
  #   command: server /data --console-address ":9001"
  #   networks:
  #     - car_price_network
  #   volumes:
  #     - minio_data:/data

  # minio_create_bucket:
  #   image: minio/mc
  #   restart: on-failure
  #   container_name: create_bucket
  #   env_file:
  #     - .env
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #   entrypoint: >
  #     bash -c "
  #     mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
  #     if ! mc ls minio/${MINIO_BUCKET}; then
  #       mc mb minio/${MINIO_BUCKET}
  #     else
  #       echo '${MINIO_BUCKET} already exists'
  #     fi
  #     "
  #   networks:
  #     - car_price_network


  # mlflow:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.mlflow
  #   restart: always
  #   container_name: mlflow
  #   env_file:
  #     - .env
  #   ports:
  #     - "5000:5000"
  #   depends_on:
  #     - minio
  #     - mysql
  #   environment:
  #     - MLFLOW_S3_ENDPOINT_URL=http://minio/9000
  #     - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
  #     - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
  #   command:
  #     mlflow server --backend-store-uri ${MLFLOW_DATABASE_URL} --default-artifact-root s3://mlflow --host 0.0.0.0 --port 5000
  #   networks:
  #     - car_price_network

  # api:
  #   build:
  #     context: .
  #     dockerfile: app/Dockerfile.api
  #   container_name: api
  #   restart: always
  #   env_file:
  #     - .env
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - redis
  #     - mlflow
  #   environment:
  #     - REDIS_PORT=${REDIS_PORT}
  #     - REDIS_HOST=${REDIS_HOST}
  #   networks:
  #     - car_price_network
  #   volumes:
  #     - ./data:/app/data
  #     - ./models:/app/models

  # ui:
  #   build:
  #     context: .
  #     dockerfile: used_car_price_prediction/ui/Dockerfile.ui
  #   container_name: ui
  #   profiles: ["with-ui"]
  #   restart: always
  #   ports:
  #     - "8501:8501"
  #   depends_on:
  #     - api
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./data=/app/data
  #     - ./models=/app/models
  #     - ./datasets=/app/datasets
  #   environment:
  #     - API_URL=${API_URL}
  #   networks:
  #     - car_price_network


volumes:
  # minio_data:
  mysql_data:
  redis_data:

networks:
  car_price_network:
